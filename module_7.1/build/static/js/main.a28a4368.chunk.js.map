{"version":3,"sources":["components/AddMovies.module.css","components/Movie.module.css","components/MoviesList.module.css","components/Movie.js","components/MoviesList.js","components/AddMovies.js","App.js","index.js"],"names":["module","exports","Movie","props","className","classes","movie","title","releaseDate","openingText","MovieList","movies","map","key","id","AddMovie","titleRef","useRef","openingTextRef","releaseDateRef","onSubmit","event","preventDefault","current","value","onAddMovie","control","htmlFor","type","ref","rows","App","useState","setMovies","loading","setLoading","error","setError","fetchMoviesHandler","useCallback","fetch","response","ok","Error","json","data","loadedMovies","push","message","method","body","JSON","stringify","headers","console","log","useEffect","Fragment","onClick","length","MoviesList","ReactDOM","createRoot","document","getElementById","render"],"mappings":";4HACAA,EAAOC,QAAU,CAAC,QAAU,6B,oBCA5BD,EAAOC,QAAU,CAAC,MAAQ,uB,gBCA1BD,EAAOC,QAAU,CAAC,cAAc,kC,2LCajBC,EAVD,SAACC,GACb,OACE,wBAAIC,UAAWC,IAAQC,OACrB,4BAAKH,EAAMI,OACX,4BAAKJ,EAAMK,aACX,2BAAIL,EAAMM,e,gBCWDC,EAfG,SAACP,GACjB,OACE,wBAAIC,UAAWC,IAAQ,gBACpBF,EAAMQ,OAAOC,KAAI,SAACN,GAAD,OAChB,kBAAC,EAAD,CACEO,IAAKP,EAAMQ,GACXP,MAAOD,EAAMC,MACbC,YAAaF,EAAME,YACnBC,YAAaH,EAAMG,mB,wBC6BdM,MAtCf,SAAkBZ,GAChB,IAAMa,EAAWC,iBAAO,IAClBC,EAAiBD,iBAAO,IACxBE,EAAiBF,iBAAO,IAgB9B,OACE,0BAAMG,SAfR,SAAuBC,GACrBA,EAAMC,iBAIN,IAAMhB,EAAQ,CACZC,MAAOS,EAASO,QAAQC,MACxBf,YAAaS,EAAeK,QAAQC,MACpChB,YAAaW,EAAeI,QAAQC,OAGtCrB,EAAMsB,WAAWnB,KAKf,yBAAKF,UAAWC,IAAQqB,SACtB,2BAAOC,QAAQ,SAAf,SACA,2BAAOC,KAAK,OAAOd,GAAG,QAAQe,IAAKb,KAErC,yBAAKZ,UAAWC,IAAQqB,SACtB,2BAAOC,QAAQ,gBAAf,gBACA,8BAAUG,KAAK,IAAIhB,GAAG,eAAee,IAAKX,KAE5C,yBAAKd,UAAWC,IAAQqB,SACtB,2BAAOC,QAAQ,QAAf,gBACA,2BAAOC,KAAK,OAAOd,GAAG,OAAOe,IAAKV,KAEpC,+C,yyMCsFSY,MArHf,WACE,MAA4BC,mBAAS,IAArC,mBAAOrB,EAAP,KAAesB,EAAf,KACA,EAA8BD,oBAAS,GAAvC,mBAAOE,EAAP,KAAgBC,EAAhB,KACA,EAA0BH,mBAAS,MAAnC,mBAAOI,EAAP,KAAcC,EAAd,KA6BMC,EAAqBC,sBAAW,sBAAC,iGACrCJ,GAAW,GACXE,EAAS,MAF4B,kBAQZG,MAAM,oEARM,WAQ7BC,EAR6B,QASrBC,GATqB,sBAU3B,IAAIC,MAAM,2BAViB,wBAchBF,EAASG,OAdO,QAiBnC,IAAU/B,KAHJgC,EAd6B,OAgB7BC,EAAe,GACJD,EACfC,EAAaC,KAAK,CAChBjC,GAAID,EACJN,MAAQsC,EAAKhC,GAAKN,MAClBE,YAAcoC,EAAKhC,GAAKJ,YACxBD,YAAcqC,EAAKhC,GAAKL,cAc5ByB,EAAUa,GACVX,GAAW,GArCwB,kDAuCnCE,EAAS,KAAMW,SAvCoB,QAyCrCb,GAAW,GAzC0B,0DA0CpC,IA1EU,4CAmFb,WAA+B7B,GAA/B,yFACyBkC,MAAM,mEAAoE,CAC/FS,OAAQ,OACRC,KAAMC,KAAKC,UAAU9C,GACrB+C,QAAS,CACP,eAAgB,sBALtB,cACQZ,EADR,gBAQqBA,EAASG,OAR9B,OAQQC,EARR,OASES,QAAQC,IAAIV,GATd,4CAnFa,sBAiGb,OAnBAW,qBAAU,WACRF,QAAQC,IAAI,QACZjB,MACC,CAACA,IAiBF,kBAAC,IAAMmB,SAAP,KACA,iCACI,kBAAC,EAAD,CAAUhC,WApGH,+CAsGT,iCACE,4BAAQiC,QAASpB,GAAjB,iBAEF,kCACIJ,IAAYE,GAASzB,EAAOgD,OAAS,GACrC,kBAACC,EAAD,CAAYjD,OAAQA,KAEpBuB,IAAYE,GAA2B,IAAlBzB,EAAOgD,QAAgB,kDAC5CzB,GAAWE,GAAS,2BAAIA,GACzBF,GAAW,4CC/GP2B,IAASC,WAAWC,SAASC,eAAe,SACpDC,OAAO,kBAAC,EAAD,S","file":"static/js/main.a28a4368.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"control\":\"AddMovies_control__212UY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"movie\":\"Movie_movie__27rBX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"movies-list\":\"MoviesList_movies-list__lMnXQ\"};","import React from 'react';\n\nimport classes from './Movie.module.css';\n\nconst Movie = (props) => {\n  return (\n    <li className={classes.movie}>\n      <h2>{props.title}</h2>\n      <h3>{props.releaseDate}</h3>\n      <p>{props.openingText}</p>\n    </li>\n  );\n};\n\nexport default Movie;\n","import React from 'react';\n\nimport Movie from './Movie';\nimport classes from './MoviesList.module.css';\n\nconst MovieList = (props) => {\n  return (\n    <ul className={classes['movies-list']}>\n      {props.movies.map((movie) => (\n        <Movie\n          key={movie.id}\n          title={movie.title}\n          releaseDate={movie.releaseDate}\n          openingText={movie.openingText}\n        />\n      ))}\n    </ul>\n  );\n};\n\nexport default MovieList;\n","import React, { useRef } from 'react';\n\nimport classes from './AddMovies.module.css';\n\nfunction AddMovie(props) {\n  const titleRef = useRef('');\n  const openingTextRef = useRef('');\n  const releaseDateRef = useRef('');\n\n  function submitHandler(event) {\n    event.preventDefault();\n\n    // could add validation here...\n\n    const movie = {\n      title: titleRef.current.value,\n      openingText: openingTextRef.current.value,\n      releaseDate: releaseDateRef.current.value,\n    };\n\n    props.onAddMovie(movie);\n  }\n\n  return (\n    <form onSubmit={submitHandler}>\n      <div className={classes.control}>\n        <label htmlFor='title'>Title</label>\n        <input type='text' id='title' ref={titleRef} />\n      </div>\n      <div className={classes.control}>\n        <label htmlFor='opening-text'>Opening Text</label>\n        <textarea rows='5' id='opening-text' ref={openingTextRef}></textarea>\n      </div>\n      <div className={classes.control}>\n        <label htmlFor='date'>Release Date</label>\n        <input type='text' id='date' ref={releaseDateRef} />\n      </div>\n      <button>Add Movie</button>\n    </form>\n  );\n}\n\nexport default AddMovie;\n","import React, { useCallback, useEffect, useState } from \"react\";\n\nimport MoviesList from \"./components/MoviesList\";\nimport \"./App.css\";\nimport AddMovie from './components/AddMovies';\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // function fetchMoviesHandler() {\n  //   fetch('https://swapi.dev/api/films/')\n  //   // fetch('https://swapi.dev/api/films/', {headers, body, method})\n  //   // it gives a promise which can be resolve or reject\n  //     .then((response) => {\n  //       return response.json();\n  //       // converts a json respond to javascript object\n  //     })\n  //     .catch((error)=>{\n  //       console.log(error);\n  //     })\n  //     // if the promise is reolve without any catch then it return a data again as promise\n  //     .then((data) => {\n  //       const transformedMovies = data.results.map((movieData) => {\n  //         return {\n  //           id: movieData.episode_id,\n  //           title: movieData.title,\n  //           openingText: movieData.opening_crawl,\n  //           releaseDate: movieData.release_date,\n  //         };\n  //       });\n  //       setMovies(transformedMovies);\n  //     });\n  // }\n\n  // using async and await\n  // async function fetchMoviesHandler() {\n  const fetchMoviesHandler = useCallback(async function () {\n    setLoading(true);\n    setError(null);\n    // NOTE: with promises we use .then for await and .catch for error\n    // for async and await we use try and catch block\n    try {\n      // const response = await fetch(\"https://swapi.dev/api/films/\");\n      // firebase api \n      const response = await fetch(\"https://react-http-6b42f-default-rtdb.firebaseio.com/movies.json\");    // .jso\n      if (!response.ok) {\n        throw new Error(\"Somthing went Wrong !!!\");\n      }\n      // the reason why if(!response.ok) is set before data coz if data is not found then the error thrown will not be ours\n\n      const data = await response.json();\n\n      const loadedMovies = [];\n      for(const key in data){\n        loadedMovies.push({\n          id: key,\n          title : data[key].title,\n          openingText : data[key].openingText,\n          releaseDate : data[key].releaseDate,\n        })\n      }\n\n      // // const transformedMovies = data.results.map((movieData) => {     // result is swapi.dev/api specific key\n      // const transformedMovies = data.map((movieData) => {\n      //   return {\n      //     id: movieData.episode_id,\n      //     title: movieData.title,\n      //     openingText: movieData.opening_crawl,\n      //     releaseDate: movieData.release_date,\n      //   };\n      // });\n      // setMovies(transformedMovies);\n      setMovies(loadedMovies);\n      setLoading(false);\n    } catch (error) {\n      setError(error.message);\n    }\n    setLoading(false);\n  }, []);\n\n  // and the best practice to list all dependencies you use instead of the effect function here in the dependencies array.\n  // hoisting\n  useEffect(() => {\n    console.log(\"shit\");\n    fetchMoviesHandler();\n  }, [fetchMoviesHandler]);\n  \n  async function addMovieHandler(movie) {\n    const response = await fetch('https://react-http-6b42f-default-rtdb.firebaseio.com/movies.json', {\n      method: 'POST',\n      body: JSON.stringify(movie),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const data = await response.json();\n    console.log(data);\n  }\n  // so we need to fetch movies for after posting to display on the page, we can avoid it by simply using useCallback hook with [] dependency and passing the addMovies function to the useEffect hook\n\n\n  return (\n    <React.Fragment>\n    <section>\n        <AddMovie onAddMovie={addMovieHandler} />\n      </section>\n      <section>\n        <button onClick={fetchMoviesHandler}>Fetch Movies</button>\n      </section>\n      <section>\n        {!loading && !error && movies.length > 0 && (\n          <MoviesList movies={movies} />\n        )}\n        {!loading && !error && movies.length === 0 && <p>Found No Movies !!</p>}\n        {!loading && error && <p>{error}</p>}\n        {loading && <p>Loading...</p>}\n      </section>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\n\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(<App />);\n"],"sourceRoot":""}